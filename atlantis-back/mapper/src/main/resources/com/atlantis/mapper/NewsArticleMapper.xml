<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- SQL映射文件 -->


<!-- namespace: 名称空间-->
<!-- 设置SQL映射文件的 namespace 属性为Mapper接口的全限定名: com.mapper.UsersMapper-->
<mapper namespace="com.atlantis.mapper.NewsArticleMapper">
    <!--    id: 该select语句的唯一标识
        result type: 返回结果的类型，属性为全限定名
-->

    <!--    结果映射：用于表中的列名和实体类中的成员属性名不一致的情况
            ResultMap：
                id: resultMap 唯一标识
                type: 返回的结果类型

                result: 一般字段的映射
                id: 主键字段的映射
                    column: 表的列名
                    property: 要映射到的实体类中的成员属性名

-->

    <!--    ${}: 用于表名、列名
    #{}: 用于参数
-->
    <resultMap id="newsArticleResultMap" type="com.atlantis.pojo.NewsArticle">
        <result property="createDate" column="create_date"></result>
    </resultMap>

    <select id="getById" resultMap="newsArticleResultMap">
        select * from news_article where id = #{id}
    </select>

    <select id="getByTitle" resultMap="newsArticleResultMap">
        select * from news_article where title = #{title}
    </select>

<!--    按照时间由新到旧的顺序进行排序
        也可以按照id的顺序 -->
    <select id="getByIndex" resultMap="newsArticleResultMap">
        select * from news_article where `index` = #{index} order by ${order}
    </select>

    <select id="getAll" resultMap="newsArticleResultMap">
        select * from news_article order by ${order}
    </select>

<!--    模糊查询-->
    <select id="fuzzyQuery" resultMap="newsArticleResultMap">
        select * from news_article where title like concat('%', #{searchKey}, '%')
                                or content like concat('%', #{searchKey}, '%')
    </select>

<!--    返回主键-->
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        insert into news_article(`index`, title, content)
            values(#{index}, #{title}, #{content})
    </insert>

    <update id="update">
        update news_article set `index` = #{index},
                        title = #{title},
                        content = #{content} where id = #{id}
    </update>

    <!--    更新view值-->
    <update id="updateView">
        update news_article set `view` = #{view} where `id` = #{id}
    </update>

    <delete id="delete">
        delete from news_article where id = #{id}
    </delete>

</mapper>